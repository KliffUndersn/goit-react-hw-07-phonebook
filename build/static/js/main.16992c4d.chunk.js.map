{"version":3,"sources":["redux/actions.js","components/InputForm/ContactList/ContactList.js","components/InputForm/FilterContacts/FilterContacts.js","components/InputForm/inputForm/fields.js","components/InputForm/inputForm/InputForm.js","components/InputForm/contactForm.js","redux/store.js","App.js","index.js"],"names":["deleteContact","createAction","addContact","filterContact","ContactList","filteredContacts","dispatch","useDispatch","map","e","name","number","onClick","id","FilterContacts","type","placeholder","onChange","target","value","fields","pattern","title","required","InputForm","items","useSelector","state","useState","setState","handleChange","onSubmit","preventDefault","newName","includes","alert","singleContact","generate","ContactForm","filter","console","log","toLowerCase","reducer","createReducer","action","payload","contactPercistConfig","key","storage","blacklist","store","configureStore","persistReducer","persistStore","getState","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16992c4d.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const deleteContact = createAction('contacts/delete');\r\nexport const addContact = createAction('contacts/add');\r\nexport const filterContact = createAction('contacts/filter');\r\n\r\n// export const addContact = contact => {\r\n//   return {\r\n//     type: types.ADD,\r\n//     payload: contact,\r\n//   };\r\n// };\r\n\r\n// export const deleteContact = id => {\r\n//   return {\r\n//     type: types.DELETE,\r\n//     payload: id,\r\n//   };\r\n// };\r\n\r\n// export const filterContact = name => {\r\n//   return {\r\n//     type: types.FILTER,\r\n//     payload: name,\r\n//   };\r\n// };\r\n","import PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteContact } from '../../../redux/actions';\r\n\r\nexport const ContactList = ({ filteredContacts }) => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <>\r\n      {filteredContacts && (\r\n        <>\r\n          <h3>Contacts</h3>\r\n          <ul>\r\n            {filteredContacts.map(e => (\r\n              <li key={e.id}>\r\n                {e.name} : {e.number}\r\n                <button onClick={() => dispatch(deleteContact(e.id))}>\r\n                  Delete\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  filteredContacts: PropTypes.arrayOf(Object).isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { filterContact } from '../../../redux/actions';\r\n\r\nexport const FilterContacts = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <h2>Find contacts by name</h2>\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        placeholder=\"start typing\"\r\n        onChange={({ target }) => dispatch(filterContact(target.value))}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nFilterContacts.propTypes = {\r\n  filtered: PropTypes.func.isRequired,\r\n};\r\n","const fields = {\r\n  name: {\r\n    type: 'text',\r\n    name: 'name',\r\n    pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\r\n    title:\r\n      \"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\",\r\n    required: true,\r\n  },\r\n  number: {\r\n    type: 'tel',\r\n    name: 'number',\r\n    pattern: '+?d{1,4}?[-.s]?(?d{1,3}?)?[-.s]?d{1,4}[-.s]?d{1,4}[-.s]?d{1,9}',\r\n    title:\r\n      'Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +',\r\n    required: true,\r\n  },\r\n};\r\nexport default fields;\r\n","import { useState } from 'react';\r\nimport { v4 as generate } from 'uuid';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addContact } from '../../../redux/actions';\r\nimport fields from './fields';\r\n\r\nconst InputForm = () => {\r\n  const items = useSelector(state => state.items);\r\n  const dispatch = useDispatch();\r\n  const [state, setState] = useState({\r\n    name: '',\r\n    number: '',\r\n  });\r\n  const handleChange = ({ target }) => {\r\n    setState({ ...state, [target.name]: target.value });\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { name, number } = state;\r\n    const newName = items.map(e => e.name);\r\n    if (newName.includes(e.target.name.value)) {\r\n      return alert(`${e.target.name.value} says hello from chat`);\r\n    }\r\n    const singleContact = {\r\n      id: generate(),\r\n      name,\r\n      number,\r\n    };\r\n    dispatch(addContact(singleContact));\r\n  };\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <h1>Phonebook</h1>\r\n        <h2>Name</h2>\r\n        <input {...fields.name} onChange={handleChange} />\r\n        <h2>Number</h2>\r\n        <input {...fields.number} onChange={handleChange} />\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputForm;\r\n","import { ContactList } from './ContactList/ContactList';\r\nimport { FilterContacts } from './FilterContacts/FilterContacts';\r\nimport { useSelector } from 'react-redux';\r\nimport InputForm from './inputForm/InputForm';\r\n\r\nconst ContactForm = () => {\r\n  const items = useSelector(state => state.items);\r\n  const filter = useSelector(state => state.filter);\r\n  console.log(items);\r\n\r\n  const filterContacts = e => {\r\n    return items.filter(e => e.name.toLowerCase().includes(filter));\r\n  };\r\n  return (\r\n    <>\r\n      <InputForm />\r\n      <FilterContacts />\r\n      <ContactList filteredContacts={filterContacts()} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n\r\n// const mapStateToProps = ({ items, filter }) => {\r\n//   return {\r\n//     items,\r\n//     filter,\r\n//   };\r\n// };\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onSubmit: value => dispatch(addContact(value)),\r\n//   onDelete: id => dispatch(deleteContact(id)),\r\n//   changiFilter: ({ target }) => dispatch(filterContact(target.value)),\r\n// });\r\n// export default connect(mapStateToProps, mapDispatchToProps)(InputForm);\r\n","import { configureStore, createReducer } from '@reduxjs/toolkit';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { addContact, deleteContact, filterContact } from './actions';\r\n\r\nconst initialStore = {\r\n  filter: '',\r\n  items: [],\r\n};\r\n\r\nconst reducer = createReducer(initialStore, {\r\n  [addContact]: (state, action) => {\r\n    return { filter: state.filter, items: [...state.items, action.payload] };\r\n  },\r\n  [deleteContact]: (state, action) => {\r\n    return {\r\n      filter: state.filter,\r\n      items: state.items.filter(e => e.id !== action.payload),\r\n    };\r\n  },\r\n  [filterContact]: (state, action) => {\r\n    return { filter: action.payload, items: [...state.items] };\r\n  },\r\n});\r\n\r\nconst contactPercistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: persistReducer(contactPercistConfig, reducer),\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\nexport default store;\r\n\r\n// const reducer = (state = initialStore, action) => {\r\n//   switch (action.type) {\r\n//     case types.ADD:\r\n//       return { filter: state.filter, items: [...state.items, action.payload] };\r\n//     case types.DELETE:\r\n//       return {\r\n//         filter: state.filter,\r\n//         items: state.items.filter(e => e.id !== action.payload),\r\n//       };\r\n//     case types.FILTER:\r\n//       return { filter: action.payload, items: [...state.items] };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const store = createStore(\r\n//   persistReducer(contactPercistConfig, reducer),\r\n//   composeWithDevTools(),\r\n// );\r\n","import React from 'react';\r\nimport InputForm from './components/InputForm/contactForm';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nstore.getState();\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Provider store={store}>\r\n        <InputForm />\r\n      </Provider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}